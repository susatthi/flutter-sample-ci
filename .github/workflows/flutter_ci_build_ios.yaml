# iOSをリリースビルドする
# コードフォーマット => 静的解析 => テスト => レポート => Codecovへ送信
# => Androidのリリースビルド and iOSのリリースビルド
# => Slackに通知
name: Flutter CI Build iOS

# ワークフロー起動条件を定義する
on:
  # プルリクエストが作成 or 更新された時
  pull_request:
    types:
      - opened
      - synchronize

  # main ブランチに push された時
  push:
    branches:
      - main

# ジョブを定義する
# 各ジョブはそれぞれまったく別々の環境で実行される
jobs:
  # 最初に実行するテストジョブ
  flutter_test:
    # 表示名の定義
    name: Flutter Test
    # ジョブを実行するOS
    runs-on: ubuntu-latest
    # タイムアウト時間（分）
    timeout-minutes: 10
    # ジョブの手順
    steps:
      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3
      # fvm のバージョンとチャネルを環境変数に設定する
      - name: Check fvm
        uses: kuhnroyal/flutter-fvm-config-action@v1
      # Flutter SDK の設定
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          # バージョンとチャネルは fvm の値を使う
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # 次回以降起動を速くするためにキャッシュしておく
          cache: true
          cache-key: flutter
          cache-path: ${{ runner.tool_cache }}/flutter
      # flutter pub get を実行
      - name: Install Flutter dependencies
        run: flutter pub get
      # コードフォーマットを実行
      # フォーマットの結果変更が発生した場合はエラー扱いにする
      - name: Run Flutter format
        run: flutter format --set-exit-if-changed .
      # 静的解析を実行
      - name: Run Flutter Analyze
        run: flutter analyze
      # テストを実行
      # あとでテスト結果を GitHub Actions 上に表示するので log に出力する
      # あとでカバレッジ結果をCodecovに送信するのでカバレッジありで実行する
      - name: Run Flutter Test
        run: flutter test --machine --coverage > test-report.log
      # テスト結果を GitHub Actions に表示する
      - name: Report Test
        uses: dorny/test-reporter@v1
        # テスト結果を表示するのでテストが失敗しても実行する
        if: always()
        with:
          name: Flutter Test Report
          path: test-report.log
          reporter: flutter-json
      # Codecov に結果を送信
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: coverage/lcov.info
          fail_ci_if_error: true
          flags: unittests
          verbose: true

  # Android ビルドジョブ
  flutter_build_android:
    name: Flutter Build for Android
    # テストジョブが成功したら実行する
    needs:
      - flutter_test
    # ジョブを実行するOS
    runs-on: ubuntu-latest
    # タイムアウト時間（分）
    timeout-minutes: 10
    # ジョブの手順
    steps:
      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3
      # fvm のバージョンとチャネルを環境変数に設定する
      - name: Check fvm
        uses: kuhnroyal/flutter-fvm-config-action@v1
      # Flutter SDK の設定
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          # バージョンとチャネルは fvm の値を使う
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # 次回以降起動を速くするためにキャッシュしておく
          cache: true
          cache-key: flutter
          cache-path: ${{ runner.tool_cache }}/flutter
      # flutter pub get を実行
      - name: Install Flutter dependencies
        run: flutter pub get
      # リリースビルドを実行
      - name: Build for Android
        run: flutter build appbundle -t lib/main.dart --release

  # iOS ビルドジョブ
  flutter_build_ios:
    name: Flutter Build for iOS
    # テストジョブが成功したら実行する
    needs:
      - flutter_test
    # ジョブを実行するOS
    runs-on: macos-latest
    # タイムアウト時間（分）
    timeout-minutes: 10
    # ジョブの手順
    steps:
      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3
      # fvm のバージョンとチャネルを環境変数に設定する
      - name: Check fvm
        uses: kuhnroyal/flutter-fvm-config-action@v1
      # Flutter SDK の設定
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          # バージョンとチャネルは fvm の値を使う
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # 次回以降起動を速くするためにキャッシュしておく
          cache: true
          cache-key: flutter
          cache-path: ${{ runner.tool_cache }}/flutter
      # flutter pub get を実行
      - name: Install Flutter dependencies
        run: flutter pub get
      # プロビジョニングファイルの取り込み
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          touch ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
          echo -n '${{ secrets.APPLE_PROVISIONING_PROFILE }}' | base64 -d -o ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
      # 証明書の取り込み
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      # リリースビルドを実行
      - name: Build for iOS
        run: flutter build ipa -t lib/main.dart --release

  # Slack通知ジョブ
  notify_slack:
    name: Notify to Slack
    # 前のジョブの成否によらず常に実行する
    if: ${{ always() }}
    # すべてのジョブが終了したら実行する
    needs:
      - flutter_test
      - flutter_build_android
      - flutter_build_ios
    # ジョブを実行するOS
    runs-on: ubuntu-latest
    # ここで環境変数を設定すると steps 配下で使えるようになる
    env:
      SLACK_USERNAME: GitHub Actions
      SLACK_ICON: https://raw.githubusercontent.com/github/explore/2c7e603b797535e5ad8b4beb575ab3b7354666e1/topics/actions/actions.png
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    # ジョブの手順
    steps:
      # すべて成功したとき
      - name: Notify Success
        if: ${{ !contains(needs.*.result, 'failure') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: SUCCESS TEST AND BUILD!
          SLACK_COLOR: good
      # テストに失敗したとき
      - name: Notify Failure Test
        if: ${{ needs.flutter_test.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE TEST ...
          SLACK_COLOR: danger
      # Android ビルドに失敗したとき
      - name: Notify Failure Build for Android
        if: ${{ needs.flutter_build_android.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD ANDROID ...
          SLACK_COLOR: danger
      # iOS ビルドに失敗したとき
      - name: Notify Failure Build for iOS
        if: ${{ needs.flutter_build_ios.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD IOS ...
          SLACK_COLOR: danger
